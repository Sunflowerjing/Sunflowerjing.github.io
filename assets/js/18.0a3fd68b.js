(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{298:function(e,s,r){"use strict";r.r(s);var t=r(0),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"express"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express"}},[e._v("#")]),e._v(" Express")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("restful")]),e._v(": 同样的一个请求, 即可以用 post 方式, 也可以用 get 方式。路由可以并排的往后写/:id/:name/:age。")]),e._v(" "),r("li")]),e._v(" "),r("h2",{attrs:{id:"express-框架核心特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express-框架核心特性"}},[e._v("#")]),e._v(" Express 框架核心特性")]),e._v(" "),r("ul",[r("li",[e._v("可以设置中间件来响应 HTTP 请求。")]),e._v(" "),r("li",[e._v("定义了路由表用于执行不同的 HTTP 请求动作。")]),e._v(" "),r("li",[e._v("可以通过向模板传递参数来动态渲染 HTML 页面。")])]),e._v(" "),r("h2",{attrs:{id:"express-的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express-的使用"}},[e._v("#")]),e._v(" Express 的使用")]),e._v(" "),r("ul",[r("li",[e._v("安装 Express 并将其保存到依赖列表中: "),r("code",[e._v("npm install express --save")])]),e._v(" "),r("li",[r("code",[e._v("安装 supervisor")]),e._v(": 热启动。"),r("code",[e._v("使用: supervisor app.js")])]),e._v(" "),r("li",[e._v("详细讲解:\n"),r("ol",[r("li",[e._v("安装并且引用 Express, 启动 Express 的实例。")]),e._v(" "),r("li",[e._v("app.listen 一个端口, 启动一个后台服务。")]),e._v(" "),r("li",[e._v("app.get 设置一个基础的路由, 然后吐出数据。")]),e._v(" "),r("li",[e._v("平时的请求都是 get, 即在浏览器上访问")]),e._v(" "),r("li",[e._v("get、post、put、delete。$.ajax->put")])])])]),e._v(" "),r("h2",{attrs:{id:"express请求和响应"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express请求和响应"}},[e._v("#")]),e._v(" Express请求和响应")]),e._v(" "),r("ul",[r("li",[e._v("Express 应用使用回调函数的参数: "),r("code",[e._v("request")]),e._v(" 和 "),r("code",[e._v("response")]),e._v(" 对象来处理"),r("code",[e._v("请求")]),e._v("和"),r("code",[e._v("响应")]),e._v("的数据。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n   // --\n})\n")])])]),r("ul",[r("li",[e._v("request 和 response 对象的具体介绍:\n"),r("ul",[r("li",[e._v("Request 对象 - "),r("code",[e._v("request")]),e._v(" 对象表示 "),r("code",[e._v("HTTP 请求")]),e._v("，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有:\n"),r("ol",[r("li",[r("code",[e._v("req.query")]),e._v(": 获取URL的查询参数串。")]),e._v(" "),r("li",[r("code",[e._v("req.params")]),e._v(": 获取路由的parameters。"),r("code",[e._v("路由: /index/:id。 访问: req.params.id")])])])]),e._v(" "),r("li",[e._v("Response 对象 - "),r("code",[e._v("response")]),e._v(" 对象表示 "),r("code",[e._v("HTTP 响应")]),e._v("，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有:\n"),r("ol",[r("li",[r("code",[e._v("res.cookie(name，value [，option])")]),e._v(": 设置Cookie。")]),e._v(" "),r("li",[r("code",[e._v("res.json()")]),e._v(": 传送JSON响应。")]),e._v(" "),r("li",[r("code",[e._v("res.jsonp()")]),e._v(": 传送JSONP响应。")]),e._v(" "),r("li",[r("code",[e._v("res.send()")]),e._v(": 传送HTTP响应。")]),e._v(" "),r("li",[r("code",[e._v("res.render(view,[locals],callback)")]),e._v(": 渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。")])])])])])]),e._v(" "),r("h2",{attrs:{id:"express-中间件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express-中间件"}},[e._v("#")]),e._v(" Express 中间件")]),e._v(" "),r("ul",[r("li",[e._v("举例: "),r("code",[e._v("next();")]),e._v(" 向下传递中间件。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var express = require('express');\nvar app = express();\napp.get('/index', function (req, res, next) {\n   req.data = 123;\n   next();\n}, function(req, res, next) {\n    console.log('通过中间件取到的值', req.data);\n    res.send('end');\n})\n")])])]),r("ul",[r("li",[e._v("Express 和 Koa 中间件的区别:\n"),r("ul",[r("li",[e._v("例如:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("aaa\nxxx next();\nbbb\n\nccc\nxxx next();\nddd\n")])])]),r("ul",[r("li",[e._v("Express: 向下走。   "),r("code",[e._v("上面的执行结果: aaa -> bbb -> ccc -> ddd")])]),e._v(" "),r("li",[e._v("Koa: 停住。   "),r("code",[e._v("上面的执行结果: aaa -> ccc -> bbb -> ddd")])])])]),e._v(" "),r("li",[e._v("使用中间件\n"),r("ul",[r("li",[e._v("应用层中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var app = express()\n\napp.use(function (req, res, next) {\n    console.log('Time:', Date.now());\n    next();\n})\n")])])]),r("ul",[r("li",[e._v("路由器级中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var app = express();\nvar router = express.Router();\n\nrouter.use(function (req, res, next) {\n    console.log('Time:', Date.now());\n    next();\n})\nrouter.use('/user/:id', function (req, res, next) {\n    console.log('Request URL:', req.originalUrl)\n    next()\n}, function (req, res, next) {\n    console.log('Request Type:', req.method)\n    next()\n})\n")])])]),r("ul",[r("li",[e._v("错误处理中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.use(function (err, req, res, next) {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n})\n")])])]),r("ul",[r("li",[e._v("内置中间件")]),e._v(" "),r("li",[e._v("第三方中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("下载: npm install cookie-parser\n\nvar express = require('express')\nvar app = express()\nvar cookieParser = require('cookie-parser')\n\n// load the cookie-parsing middleware\napp.use(cookieParser())\n")])])])])]),e._v(" "),r("h2",{attrs:{id:"express-路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express-路由"}},[e._v("#")]),e._v(" Express 路由")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("controller/action")]),e._v(": 一个 controller 对应多个 action。")]),e._v(" "),r("li",[r("code",[e._v("app.all()")]),e._v(": 用于为所有 HTTP请求方法的路径加载中间件功能。例如，无论是使用"),r("code",[e._v("GET，POST，PUT，DELETE")]),e._v("还是"),r("code",[e._v("http模块")]),e._v("支持的任何其他"),r("code",[e._v("HTTP请求方法")]),e._v("，都会对路由"),r("code",[e._v("/secret")]),e._v("的请求执行以下处理程序。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.all('/secret', function (req, res, next) {\n    // req: 接收用户的请求\n    // res: 响应用户的数据\n    console.log('Accessing the secret section ...')\n    next() // 将当前的请求, 交给下一个句柄。(句柄: 有可能是很多条语句, 对应的回调函数)\n})\n")])])]),r("ul",[r("li",[r("p",[r("code",[e._v("路线处理程序")]),e._v(": 路由处理程序可以采用函数，函数数组或二者组合的形式。")]),e._v(" "),r("ul",[r("li",[e._v("单个回调函数可以处理路由。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.get('/example/a', function (req, res) {\n    res.send('Hello from A!')\n})  \n")])])]),r("ul",[r("li",[e._v("多个回调函数可以处理一条路由（确保指定了next对象）。例如:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.get('/example/b', function (req, res, next) {\n    console.log('the response will be sent by the next function ...')\n    next()\n}, function (req, res) {\n    res.send('Hello from B!');\n})\n")])])]),r("ul",[r("li",[e._v("回调函数数组可以处理路由。例如:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var cb0 = function (req, res, next) {\n    console.log('CB0')\n    next()\n}\n\nvar cb1 = function (req, res, next) {\n    console.log('CB1')\n    next()\n}\n\nvar cb2 = function (req, res) {\n    res.send('Hello from C!')\n}\n\napp.get('/example/c', [cb0, cb1, cb2])\n")])])]),r("ul",[r("li",[e._v("独立功能和功能数组的组合可以处理路由。例如:")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var cb0 = function (req, res, next) {\n    console.log('CB0')\n    next()\n}\n\nvar cb1 = function (req, res, next) {\n    console.log('CB1')\n    next()\n}\n\napp.get('/example/d', [cb0, cb1], function (req, res, next) {\n    console.log('the response will be sent by the next function ...');\n    next();\n}, function (req, res) {\n    res.send('Hello from D!');\n})\n")])])]),r("ul",[r("li",[r("code",[e._v("应对方法")]),e._v(": res下表中响应对象（）上的方法可以向"),r("code",[e._v("客户端发送响应，并终止请求-响应周期")]),e._v("。如果从路由处理程序中"),r("code",[e._v("未调用这些方法")]),e._v("，则"),r("code",[e._v("客户端请求将被挂起")]),e._v("。")])]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("方法")]),e._v(" "),r("th",[e._v("描述")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("res.download()")]),e._v(" "),r("td",[e._v("提示要下载的文件。")])]),e._v(" "),r("tr",[r("td",[e._v("重发（）")]),e._v(" "),r("td",[e._v("结束响应过程。")])]),e._v(" "),r("tr",[r("td",[e._v("res.json（）")]),e._v(" "),r("td",[e._v("发送JSON响应。")])]),e._v(" "),r("tr",[r("td",[e._v("res.jsonp（）")]),e._v(" "),r("td",[e._v("发送带有JSONP支持的JSON响应。")])]),e._v(" "),r("tr",[r("td",[e._v("res.redirect（）")]),e._v(" "),r("td",[e._v("重定向请求。")])]),e._v(" "),r("tr",[r("td",[e._v("res.render（）")]),e._v(" "),r("td",[e._v("渲染视图模板。")])]),e._v(" "),r("tr",[r("td",[e._v("res.send（）")]),e._v(" "),r("td",[e._v("发送各种类型的响应。")])]),e._v(" "),r("tr",[r("td",[e._v("res.sendFile（）")]),e._v(" "),r("td",[e._v("将文件作为八位字节流发送。")])]),e._v(" "),r("tr",[r("td",[e._v("res.sendStatus（）")]),e._v(" "),r("td",[e._v("设置响应状态代码，并将其字符串表示形式发送为响应正文。")])])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);