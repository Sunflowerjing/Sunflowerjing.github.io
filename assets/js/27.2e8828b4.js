(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{261:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-qa工程师"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-qa工程师"}},[e._v("#")]),e._v(" JavaScript&QA工程师")]),e._v(" "),a("h2",{attrs:{id:"单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[e._v("#")]),e._v(" 单元测试")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("why")]),e._v(":\n"),a("ul",[a("li",[a("code",[e._v("正确性")]),e._v(": 测试可以验证代码的正确性。")]),e._v(" "),a("li",[a("code",[e._v("自动化")]),e._v(": 通过编写测试用例，可以做到一次编写，多次运行。")]),e._v(" "),a("li",[a("code",[e._v("解释性")]),e._v(": 测试用例用于测试接口、模块的重要性，那么在测试用例中就会涉及如何使用这些API。")]),e._v(" "),a("li",[a("code",[e._v("驱动开发，指导设计")]),e._v(": 保证代码的可测试性，就需要在开发中注意API的设计，TDD将测试前移就是起到这么一个作用")]),e._v(" "),a("li",[a("code",[e._v("保证重构")]),e._v(": 怎么才能保证重构后代码的质量呢?有测试用例做后盾，就可以大胆的进行重构")])])]),e._v(" "),a("li",[a("code",[e._v("目的")]),e._v(": 单元测试能够让开发者明确知道代码结果")]),e._v(" "),a("li",[a("code",[e._v("原则")]),e._v(": 单一职责、接口抽象、层次分离")]),e._v(" "),a("li",[a("code",[e._v("断言库")]),e._v(": 保证最小单元是否正常运行检测方法")]),e._v(" "),a("li",[a("code",[e._v("测试风格")]),e._v(": 敏捷开发方法论(包含测试驱动开发和行为驱动开发)\n"),a("ul",[a("li",[e._v("TDD 测试驱动开发\n"),a("ul",[a("li",[e._v("关注所有的功能是否被实现(每一个功能都必须有对应的测试用例)")]),e._v(" "),a("li",[e._v("suite配合test利用assert('tobi' == user.name);结果先行")]),e._v(" "),a("li",[e._v("先写测试用例, 在去开发测试")])])]),e._v(" "),a("li",[e._v("BDD 行为驱动开发\n"),a("ul",[a("li",[e._v("关注整体行为是否符合整体预期,编写的每一行代码都有目的提供一个全面的测试用例集。")]),e._v(" "),a("li",[e._v("expect/should, describe配合it利用自然语言expect(1).toEqual(fn())执行结果。")]),e._v(" "),a("li",[e._v("先开发, 在测试")])])]),e._v(" "),a("li",[e._v("比较常用的测试包\n"),a("ul",[a("li",[e._v("chai.js(TDD BDD双模)")]),e._v(" "),a("li",[e._v("Jasmine.js(BDD)")])])])])]),e._v(" "),a("li",[a("code",[e._v("单元测试运行流程")]),e._v(": 每一个测试用例组通过describe进行设置\n"),a("ul",[a("li",[e._v("before -> beforeEach -> it -> after -> afterEach")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("describe   => before、after\n    it     => beforeEach、afterEach\n    it     => beforeEach、afterEach\n    it     => beforeEach、afterEach\n")])])]),a("ul",[a("li",[e._v("before单个测试用例(it)开始前")]),e._v(" "),a("li",[e._v("beforeEach每一个测试用例开始前")]),e._v(" "),a("li",[e._v("it定义测试用例并利用断言库进行设置chai如: expect(x).to.equal(true); 异步mocha")]),e._v(" "),a("li",[e._v("以上专业术语叫mock")])])])]),e._v(" "),a("h2",{attrs:{id:"性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[e._v("#")]),e._v(" 性能测试")]),e._v(" "),a("h2",{attrs:{id:"安全测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全测试"}},[e._v("#")]),e._v(" 安全测试")]),e._v(" "),a("h2",{attrs:{id:"功能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能测试"}},[e._v("#")]),e._v(" 功能测试")]),e._v(" "),a("h2",{attrs:{id:"karma-自动化单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#karma-自动化单元测试"}},[e._v("#")]),e._v(" karma 自动化单元测试")]),e._v(" "),a("ul",[a("li",[e._v("karma 自动化 runner 集成 PhantomJS 无刷新")]),e._v(" "),a("li",[e._v("如果以下包很难装, 则用 cnpm 安装。\n"),a("ul",[a("li",[e._v("执行: "),a("code",[e._v("npm install -g cnpm --registry=https://registry.npm.taobao.org")])]),e._v(" "),a("li",[e._v("安装好了就可以使用cnpm来替代npm进行js依赖的下载了: "),a("code",[e._v("cnpm install")])])])])]),e._v(" "),a("ol",[a("li",[e._v("安装单元测试框架: "),a("code",[e._v("npm install karma --save-dev")])]),e._v(" "),a("li",[e._v("执行 karma init 命令, 生成 karma.conf.js 测试框架选择 jasmine, 浏览器选择PhantomJS")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package.json 里添加\n"unit:init": "karma init",    // 初始化\n"unit:start": "karma start"   // 运行\n')])])]),a("ul",[a("li",[e._v("运行的时候用: "),a("code",[e._v("npx karma start")]),e._v("(确保跑的配置和依赖项都在文件夹里)。"),a("code",[e._v("npx 不受全局安装影响")]),e._v(", 项目装什么用什么，和直接跑bin里的karma是一个道理。")])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("安装断言库")])]),e._v(" "),a("ul",[a("li",[e._v("npm install karma-jasmine jasmine-core --save-dev")]),e._v(" "),a("li",[e._v("npm install --save-dev karma-phantomjs-launcher")]),e._v(" "),a("li",[e._v("下载安装PhantomJS(无头浏览器，现在不维护了。最新的无头浏览器是puppeteer), 配置路径\n"),a("ul",[a("li",[e._v("export PHANTOMJS_BIN = /usr/local/bin/phantomjs")])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("安装生成测试报告和代码覆盖率检测工具\nnpm install karma karma-coverage --save-dev")]),e._v(" "),a("li",[e._v("karma.conf.js 配置文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n    basePath: '',\n    frameworks: ['jasmine'],\n    files: [\n        \"./src/**/*.js\",\n        \"./tests/unit/**/*.spec.js\"\n    ], \n    exclude: [],\n    // index.js 里写 es6+ 语法, 支持不了 babel webpack\n    preprocessors: { // 什么样的文件测试覆盖率\n      \"src/**/*.js\": ['coverage']  // cnpm install -g karma-coverage\n    },\n    coverageReporter: {\n      type : 'html',\n      dir : './docs/coverage/'\n    },\n    reporters: ['progress', 'coverage'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: ['Chrome', 'PhantomJS'],\n    singleRun: true,\n    concurrency: Infinity\n}\n")])])]),a("h2",{attrs:{id:"ui-测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui-测试"}},[e._v("#")]),e._v(" UI 测试")]),e._v(" "),a("ol",[a("li",[e._v("Phan tom Css")]),e._v(" "),a("li",[e._v("backstopjs: "),a("code",[e._v("npm install -g backstopjs")]),e._v(" "),a("ul",[a("li",[e._v("执行: backstop init")]),e._v(" "),a("li",[e._v("会生成文件 "),a("code",[e._v("backstop.json")]),e._v("和 文件夹"),a("code",[e._v("backstop_data")]),e._v("(包含文件夹 chromy 和 puppet, 操作无头浏览器)。 二者相互配合")]),e._v(" "),a("li",[a("code",[e._v("backstop.json")]),e._v(" 文件内容")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "id": " QQ",\n    "viewports": [  // 窗口\n        {\n            "label": "iphone",\n            "width": 375,\n            "height": 667\n        },\n        {\n            "label": "ipad",\n            "width": 1024,\n            "height": 1366\n        }\n    ],\n    "onBeforeScript": "puppet/onBefore.js",  // 操作无头浏览器\n    "onReadyScript": "puppet/onReady.js",   // 操作无头浏览器\n    "scenarios": [\n        {\n        "label": "map",\n        "cookiePath": "backstop_data/engine_scripts/cookies.json",\n        "url": "https://map.qq.com/m/", // 对比的网址\n        "referenceUrl": "",\n        "readyEvent": "",\n        "readySelector": "",\n        "delay": 0,\n        "hideSelectors": [],\n        "removeSelectors": [],\n        "hoverSelector": "",\n        "clickSelector": "",\n        "postInteractionWait": 0,\n        "selectors": [],\n        "selectorExpansion": true,\n        "expect": 0,\n        "misMatchThreshold" : 0.1,\n        "requireSameDimensions": true\n        }\n    ],\n    "paths": {\n        "bitmaps_reference": "backstop_data/bitmaps_reference",  \n        "bitmaps_test": "backstop_data/bitmaps_test",  // 这个是生成的文件夹\n        "engine_scripts": "backstop_data/engine_scripts",\n        "html_report": "backstop_data/html_report",\n        "ci_report": "backstop_data/ci_report"\n    },\n    "report": ["browser"],\n    "engine": "puppeteer",  // 最新的无头浏览器 和 rize 一起用\n    "engineOptions": {\n        "args": ["--no-sandbox"]\n    },\n    "asyncCaptureLimit": 5,\n    "asyncCompareLimit": 50,\n    "debug": false,\n    "debugWindow": false\n}\n')])])])]),e._v(" "),a("li",[e._v("package.json")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"ui:init": "backstop init",  // 初始化\n"ui:start": "backstop test"  // 运行 可执行 npx backstop test\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("在"),a("code",[e._v("backstop_data")]),e._v("文件夹中创建"),a("code",[e._v("bitmaps_reference")]),e._v("文件夹, 放入 UI 切片图。")])]),e._v(" "),a("h2",{attrs:{id:"e2e测试-功能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#e2e测试-功能测试"}},[e._v("#")]),e._v(" e2e测试 (功能测试)")]),e._v(" "),a("ol",[a("li",[e._v("安装selenium: "),a("code",[e._v("npm install selenium-webdriver")])]),e._v(" "),a("li",[e._v("使用:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const {Builder, By, Key, until} = require('selenium-webdriver');\n \n(async function example() {\n  let driver = await new Builder().forBrowser('firefox').build();\n  try {\n    await driver.get('http://www.baidu.com');\n    await driver.findElement(By.name('q')).sendKeys('webdriver', Key.RETURN);\n    await driver.wait(until.titleIs('webdriver - Google Search'), 1000);\n  } finally {\n    await driver.quit();\n  }\n})();\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("package.json")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"e2e:start": "node ./tests/e2e/index.space.js"\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[e._v("geckodriver")]),e._v(" 找不到的原因是: 需要安装浏览器驱动。\n"),a("ul",[a("li",[e._v("相关网址: https://www.npmjs.com/package/selenium-webdriver")])])])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Browser")]),e._v(" "),a("th",[e._v("Component")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Chrome")]),e._v(" "),a("td",[e._v("chromedriver(.exe)")])]),e._v(" "),a("tr",[a("td",[e._v("Internet Explorer")]),e._v(" "),a("td",[e._v("IEDriverServer.exe")])]),e._v(" "),a("tr",[a("td",[e._v("Edge")]),e._v(" "),a("td",[e._v("MicrosoftWebDriver.msi")])]),e._v(" "),a("tr",[a("td",[e._v("Firefox")]),e._v(" "),a("td",[e._v("geckodriver(.exe)")])]),e._v(" "),a("tr",[a("td",[e._v("Safari")]),e._v(" "),a("td",[e._v("safaridriver")])])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[e._v("其他功能测试工具")])]),e._v(" "),a("ul",[a("li",[e._v("Nightwatch.js")]),e._v(" "),a("li",[e._v("rize (比较常用)")]),e._v(" "),a("li",[e._v("cypress")]),e._v(" "),a("li",[e._v("阿里的 f2etest (比较复杂)")])]),e._v(" "),a("h2",{attrs:{id:"service-测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-测试"}},[e._v("#")]),e._v(" service 测试")]),e._v(" "),a("ol",[a("li",[e._v("测试 nodejs api 的 API 是否与结果符合")]),e._v(" "),a("li",[e._v("app.js 文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\n\napp.use(async ctx => {\n    ctx.body = {\n        data: 'Hello World'\n    }\n});\n\napp.listen(3000);\n\nmodule.exports = app;\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("router.spec.js 文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const superagent = require("supertest");\nconst app = require("./app");\nfunction request() {\n    return superagent(app.listen());\n}\ndescribe("接口测试脚本", function () {\n    it("API测试", function (done) {\n        request()\n            .get("/")\n            .set("Accept","application/json")\n            .expect("Content-Type",/json/)\n            .expect(200)\n            .end(function(err,res){\n                if(err){\n                    done(err);\n                }\n                if(res.body.data=="Hello World"){\n                    done();\n                }else{\n                    done(new Error("返回接口错误"));\n                }\n            })\n    });\n});\ndescribe("Node的容错机制", function () {\n    it("404脚本错误", function (done) {\n        request()\n            .get("/message/notfound")\n            .expect("404", done);\n    });\n});\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("mochaRunner.js 文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const Mocha = require("mocha");\n\nconst mocha = new Mocha({\n    reporter: \'mochawesome\',\n    reporterOptions: {\n        reportDir: "./docs/mochawesome-report"\n    }\n})\nmocha.addFile("./tests/service/router.spec.js");\n\nmocha.run(function () {\n    console.log("All done");\n    process.exit();\n})\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);