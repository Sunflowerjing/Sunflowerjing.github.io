(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{288:function(t,a,e){"use strict";e.r(a);var i=e(0),v=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("h2",{attrs:{id:"常见的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的操作"}},[t._v("#")]),t._v(" 常见的操作")]),t._v(" "),e("h2",{attrs:{id:"查看分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),e("ol",[e("li",[t._v("查看项目的分支们(包括本地和远程): "),e("code",[t._v("git branch -a")])]),t._v(" "),e("li",[t._v("删除本地分支: "),e("code",[t._v("git branch -d <BranchName>")])])]),t._v(" "),e("h2",{attrs:{id:"查看远程地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看远程地址"}},[t._v("#")]),t._v(" 查看远程地址")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git remote -v")])])]),t._v(" "),e("h2",{attrs:{id:"查看历史提交信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看历史提交信息"}},[t._v("#")]),t._v(" 查看历史提交信息")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git log")])])]),t._v(" "),e("h2",{attrs:{id:"git丢弃本地修改的所有文件（新增、删除、修改）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git丢弃本地修改的所有文件（新增、删除、修改）"}},[t._v("#")]),t._v(" git丢弃本地修改的所有文件（新增、删除、修改）")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git checkout .")]),t._v(":本地所有修改的。没有的提交的，都返回到原来的状态")]),t._v(" "),e("li",[e("code",[t._v("git stash")]),t._v(": 把所有没有提交的修改暂存到stash里面。可用"),e("code",[t._v("git stash pop")]),t._v("回复.")]),t._v(" "),e("li",[e("code",[t._v("git reset --hard HASH")]),t._v(": 返回到某个节点，不保留修改。")]),t._v(" "),e("li",[e("code",[t._v("git reset --soft HASH")]),t._v(": 返回到某个节点。保留修改。")]),t._v(" "),e("li",[e("code",[t._v("git clean -df")]),t._v(": 返回到某个节点")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-n 显示 将要 删除的 文件 和  目录\n-f 删除 文件\n-df 删除 文件 和 目录\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[t._v("也可以使用: "),e("code",[t._v("git checkout . && git clean -xdf")])]),t._v(" "),e("li",[t._v("放弃本地修改，直接覆盖之: "),e("code",[t._v("git reset --hard")]),t._v(" "),e("code",[t._v("git pull")])])]),t._v(" "),e("p",[t._v("https://blog.csdn.net/ustccw/article/details/79068547")]),t._v(" "),e("h2",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("将 A 分支的内容合并到 B 分支上面: "),e("code",[t._v("当前在 B 分支下面执行: git pull origin A")])])]),t._v(" "),e("li",[e("p",[t._v("git 维护 commit 历史线小技巧。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("git merge ${yourBranch}   // 合并分支，但commit历史是线性的，从git log —graph 无法看出分支合并记录。")])]),t._v(" "),e("li",[e("p",[t._v("git merge ${yourBranch}  —no-ff   // 推荐，能看出分支合并记录。")])]),t._v(" "),e("li",[e("p",[t._v("git commit —amend    // 追加上一次提交。 比如上一次提交时候遗漏了一些修改， 可以将遗漏的更新追加到上一个commit中。")])]),t._v(" "),e("li",[e("p",[t._v("git rebase    // commit合并。 比如你在你的开发分支中，提了 N 个commit , 而message 都是瞎写的，合并到主分支的时候建议使用这个来合并你的乱七八糟的commit历史，免得污染主分支的提交历史。")])]),t._v(" "),e("li",[e("p",[t._v("高频使用是 git merge --no-ff 和 git commit --amend")])])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);