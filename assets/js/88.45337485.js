(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{271:function(a,t,e){"use strict";e.r(t);var n=e(0),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"微信小程序基础概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序基础概念"}},[a._v("#")]),a._v(" 微信小程序基础概念")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("wx:if")]),a._v(" 和 "),e("code",[a._v("hidden")]),a._v(" 都可以用来做判断:\n"),e("ul",[e("li",[e("code",[a._v("hidden")]),a._v(" 无论是否为真，都会渲染到页面中。"),e("code",[a._v("wx:if")]),a._v(" 相应的则不会被渲染到页面中。如果没有频繁的切换，则使用"),e("code",[a._v("wx:if")]),a._v("会较好些。")]),a._v(" "),e("li",[a._v("修改 WX小程序中的数据需要用 "),e("code",[a._v("setData")]),a._v(" 更新数据。")])])])]),a._v(" "),e("ol",[e("li",[e("code",[a._v("bindtap")]),a._v("触发的点击函数, 里面的"),e("code",[a._v("dataset")]),a._v("属性,可以获取到组件节点中附加一些自定义数据。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('wxml文件\n<view data-alpha-beta="1" data-alphaBeta="2" bindtap="bindViewTap"> DataSet Test </view>\n\njs文件\nPage({\n  bindViewTap:function(event){\n    event.currentTarget.dataset.alphaBeta === 1 //  大写会转为小写\n    event.currentTarget.dataset.alphabeta === 2 //  - 会转为驼峰写法\n  }\n})\n')])])]),e("h2",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[a._v("#")]),a._v(" 目录结构")]),a._v(" "),e("ol",[e("li",[a._v("小程序包含一个"),e("strong",[a._v("描述整体程序的 app")]),a._v(" 和多个"),e("strong",[a._v("描述各自页面的 page")]),a._v("。")]),a._v(" "),e("li",[a._v("一个"),e("strong",[a._v("小程序主体")]),a._v("部分由三个文件组成，必须放在项目的根目录，如下：\n"),e("ul",[e("li",[a._v("app.js(小程序逻辑)")]),a._v(" "),e("li",[a._v("app.json(小程序公共配置, 例如页面入口)  在微信开发者工具中，打开小程序的"),e("strong",[a._v("项目目录")]),a._v("中，必须包含app.json。即 "),e("strong",[a._v("src > pages、app.json")]),a._v("，打开 src 文件夹。")]),a._v(" "),e("li",[a._v("app.wxss(小程序公共样式表)")])])]),a._v(" "),e("li",[a._v("一个"),e("strong",[a._v("小程序页面")]),a._v("由四个文件组成，分别是：\n"),e("ul",[e("li",[a._v(".js(页面逻辑)")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('JS 只需要管理状态即可:  this.setData({ msg: "Hello World" })\n\n页面(page)中的 js: Page({})\n组件(components)中的 js: Component({})\nAPP 中的 js: App({})\n')])])]),e("ul",[e("li",[a._v(".wxml(页面结构)")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WXML 是这么写:  <text>{{msg}}</text>\n")])])]),e("ul",[e("li",[a._v(".json(页面配置)")]),a._v(" "),e("li",[a._v(".wxss(页面样式表)")]),a._v(" "),e("li",[e("strong",[a._v("注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。")])])])])]),a._v(" "),e("h2",{attrs:{id:"注册小程序-app-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册小程序-app-js"}},[a._v("#")]),a._v(" 注册小程序(app.js)")]),a._v(" "),e("ol",[e("li",[a._v("每个小程序都需要在 app.js 中调用 App 方法注册小程序实例。"),e("strong",[a._v("App(Object object)")]),a._v(", 接受一个 Object 参数，其指定小程序的生命周期回调等。"),e("strong",[a._v("App() 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。")])]),a._v(" "),e("li",[a._v("绑定生命周期回调函数、错误监听和页面不存在监听函数等。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// app.js\nApp({\n  onLaunch (options) {\n    // 生命周期回调——监听小程序初始化完成时触发，全局只触发一次。\n  },\n  onShow (options) {\n    // 生命周期回调——监听小程序启动或切前台。\n  },\n  onHide () {\n    // 生命周期回调——监听小程序切后台。\n  },\n  onError (msg) {\n    console.log(msg);  // 错误监听函数。\n  },\n  onPageNotFound() {\n      // 页面不存在监听函数。\n  },\n  onUnhandledRejection() {\n      // 未处理的 Promise 拒绝事件监听函数。\n  },\n  onReachBottom: function() {\n    // 监听用户上拉触底事件\n  },\n  globalData: 'I am global data'\n})\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("整个小程序只有一个 App 实例，是全部页面共享的。")]),a._v(" "),e("li",[a._v("开发者可以通过 getApp 方法获取到全局唯一的 App 实例")]),a._v(" "),e("li",[a._v("获取App上的数据或调用开发者注册在 App 上的函数。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const appInstance = getApp()\nconsole.log(appInstance.globalData) // I am global data\n")])])]),e("h2",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[a._v("#")]),a._v(" 组件")]),a._v(" "),e("ol",[e("li",[a._v("组件中的 .js 写法")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Component({\n    // 组件的对外属性，是属性名到属性设置的映射表\n    properties: {   \n        myProperty: { // 属性名\n            type: String,  // 属性的类型\n            value: ''    // 属性的初始值\n        },\n        myProperty2: String // 简化的定义方式\n    },\n    // 组件的内部数据，和 properties 一同用于组件的模板渲染\n    data: {\n\n    },\n    // 组件的方法\n    methods: {\n        click() {\n            // 组件之间的通信 \n            this.triggerEvent('page中bind后面的事件名，例如: bind:searchList123',则为: searchList123。);\n        }\n    }\n})\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("组件触发页面中的方法，用 "),e("strong",[a._v("this.triggerEvent('页面中 bind 后面的名字')")]),a._v("。重点")]),a._v(" "),e("li",[a._v("在组件的.json 文件中,写入以下内容")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('{\n    "component": true\n}\n')])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("在引入组件的页面中,.json 应该如下配置")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('{\n  "usingComponents": {\n        "SearchBar": "/components/searchBox/searchBox",\n  }\n}\n')])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("若要使用微信的扩展组件，即 WeUI 组件库, 需要下载https://developers.weixin.qq.com/miniprogram/dev/extended/weui/download.html")])]),a._v(" "),e("h2",{attrs:{id:"控制-tabbar-显示或者隐藏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制-tabbar-显示或者隐藏"}},[a._v("#")]),a._v(" 控制 tabBar, 显示或者隐藏")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 显示\nwx.showTabBar({\n    animation: true   // 动画\n});\n2. 隐藏\nwx.hideTabBar({\n    animation: true\n});\n")])])]),e("h2",{attrs:{id:"input标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input标签"}},[a._v("#")]),a._v(" input标签")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. bindfocus: 输入框聚焦时触发\n2. bindinput: 键盘输入时触发\n3. bindconfirm: 点击完成按钮时触发\n4. bindblur: 输入框失去焦点时触发\n\n以上方法，都会有event.detail={}参数\n")])])]),e("h2",{attrs:{id:"storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#storage"}},[a._v("#")]),a._v(" Storage")]),a._v(" "),e("ol",[e("li",[a._v("wx.setStorage({})。将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("wx.setStorage({\n   key: 'openId',\n   data:\" 123456789\"\n})\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("wx.getStorage({})。从本地缓存中异步获取指定 key 的内容。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("wx.getStorage({\n  key: 'openId',\n  success (res) {\n    console.log(res.data)\n  }\n})\n")])])]),e("h2",{attrs:{id:"用户id-包括openid和unionid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户id-包括openid和unionid"}},[a._v("#")]),a._v(" 用户ID(包括openid和unionid)")]),a._v(" "),e("ol",[e("li",[e("code",[a._v("openId")]),a._v("是来区分"),e("code",[a._v("用户唯一标识")]),a._v("。")]),a._v(" "),e("li",[a._v("openid"),e("code",[a._v("同一个应用")]),a._v("（App、公众号、小程序）的"),e("code",[a._v("同一个用户")]),a._v("有"),e("code",[a._v("唯一的openid")]),a._v("。")]),a._v(" "),e("li",[a._v("如果开发者"),e("code",[a._v("拥有多个移动应用、网站应用、和公众帐号（包括小程序）")]),a._v(", 可通过 "),e("code",[a._v("UnionID")]),a._v("来区分用户的唯一性，"),e("code",[a._v("因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序）")]),a._v("，用户的 UnionID 是唯一的。换句话说，"),e("code",[a._v("同一用户，对同一个微信开放平台下的不同应用，unionid是相同的")]),a._v("。")]),a._v(" "),e("li",[a._v("同一个用户，在你的多个应用中，"),e("code",[a._v("openid")]),a._v("可能都不相同；但是，"),e("code",[a._v("unionid")]),a._v("一定会相同的。")])]),a._v(" "),e("h2",{attrs:{id:"预览图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预览图片"}},[a._v("#")]),a._v(" 预览图片")]),a._v(" "),e("ol",[e("li",[a._v("wx.previewImage({})\n在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("wx.previewImage({\n  current: '', // 当前显示图片的http链接\n  urls: [] // 需要预览的图片http链接列表\n})\n")])])]),e("h2",{attrs:{id:"获取-openid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-openid"}},[a._v("#")]),a._v(" 获取 openID")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("wx.login({\n    success: function(res){\n        wx.request({\n            url: '请求后端',  //接口地址\n            method: 'POST',\n            header: {\n                'content-type': 'applicaiton/x-www-form-urlencoded' // 默认值 application/json\n            },\n            data: {\n                code:res.code, //微信下发临时登录凭证\n            },\n            success: function (openIDRes) {\n                console.log(openIDRes);\n                if(openIDRes.status === 0){\n                    wx.setStorage({\n                        key: 'openId',\n                        data: openIDRes.data.openId\n                    })\n                }\n            }\n        })\n    }\n})\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);